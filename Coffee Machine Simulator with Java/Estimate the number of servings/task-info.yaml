type: edu
files:
  - name: src/machine/CoffeeMachine.java
    visible: true
    text: |
      package machine;
      
      public class CoffeeMachine {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/CoffeeMachineTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.List;
      
      
      class TestClue {
          boolean cond;
          int num;
          boolean showTests;
          TestClue(boolean c, int n, boolean showTests) {
              cond = c;
              num = n;
              this.showTests = showTests;
          }
      }
      
      public class CoffeeMachineTest extends StageTest<TestClue> {
      
          @Override
          public List<TestCase<TestClue>> generate() {
              return List.of(
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(true, 0, true))
                      .setInput("300\n65\n111\n1"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(true, 2, true))
                      .setInput("600\n153\n100\n1"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(true, 2, true))
                      .setInput("1400\n150\n100\n1"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(true, 2, true))
                      .setInput("1400\n1500\n45\n1"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(false, 2, true))
                      .setInput("599\n250\n200\n10"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(true, 867, true))
                      .setInput( "345640\n43423\n23234\n1"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(false, 1548, true))
                      .setInput("345640\n434230\n23234\n19246"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(false, 172, true))
                      .setInput( "34564\n43423\n23234\n19246"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(true, 0, false))
                      .setInput("399\n112\n111\n1"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(true, 3, false))
                      .setInput("2400\n249\n100\n1"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(true, 1, false))
                      .setInput("1400\n1500\n44\n1"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(false, 2, false))
                      .setInput("500\n250\n200\n10"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(true, 171, false))
                      .setInput("34564\n43423\n23234\n1"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(true, 1547, false))
                      .setInput("345640\n434230\n23234\n1"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(false, 868, false))
                      .setInput("345640\n43423\n23234\n19246")
      
              );
          }
      
          @Override
          public CheckResult check(String reply, TestClue clue) {
              String[] lines = reply.trim().split(":");
      
              if (lines.length <= 1) {
                  return CheckResult.wrong("Looks like you didn't print anything!");
              }
      
              String userOutput = lines[lines.length - 1].trim();
              String loweredOutput = userOutput.toLowerCase();
              boolean ans = clue.cond;
              int amount = clue.num;
              if (ans) {
                  if (amount > 0) {
                      boolean isCorrect =
                          loweredOutput.contains(Integer.toString(amount))
                           && loweredOutput.contains("yes");
      
                      if (isCorrect) {
                          return CheckResult.correct();
                      } else {
      
                          String rightOutput =
                              "Yes, I can make that amount of coffee" +
                                  " (and even " + amount + " more than that)";
      
                          if (clue.showTests) {
                              return new CheckResult(false,
                                  "Your output:\n" +
                                      userOutput +
                                      "\nRight output:\n" +
                                      rightOutput);
                          } else {
                              return CheckResult.wrong("");
                          }
                      }
                  }
      
                  String rightOutput =
                      "Yes, I can make that amount of coffee";
      
                  if (loweredOutput.equals(rightOutput.toLowerCase())) {
                      return CheckResult.correct();
                  } else {
                      if (clue.showTests) {
                          return new CheckResult(false,
                              "Your output:\n" +
                                  userOutput +
                                  "\nRight output:\n" +
                                  rightOutput);
                      } else {
                          return CheckResult.wrong("");
                      }
                  }
      
              } else {
                  boolean cond1 = loweredOutput.contains("no");
                  boolean cond2 = loweredOutput.contains(Integer.toString(amount));
      
                  if (cond1 && cond2) {
                      return CheckResult.correct();
                  } else {
      
                      String rightOutput = "No, I can make only " +
                          amount +" cup(s) of coffee";
      
                      if (clue.showTests) {
                          return new CheckResult(false,
                              "Your output:\n" +
                              userOutput +
                              "\nRight output:\n" +
                              rightOutput);
                      } else {
                          return CheckResult.wrong("");
                      }
                  }
              }
          }
      }
    learner_created: false
  - name: src/machine/IngredientRequirements.java
    visible: true
    text: |
      package machine;
      
      public class IngredientTotals {
          // INSTANCE VARIABLES
          private int totalWater;
          private int totalMilk;
          private int totalCoffeeBeans;
          private int numberOfCups;
      
          // CONSTRUCTOR
      
          /**
           * Constructor that takes in the number of cups and calculates the total ingredients required
           * @param numberOfCups The number of cups of coffee required.
           */
          public IngredientTotals(int numberOfCups) {
              this.numberOfCups = numberOfCups;
              // Calculates and set all the totals for the instance variables above
              this.totalWater = IngredientCalculator.calculateTotalWater(numberOfCups);
              this.totalMilk = IngredientCalculator.calculateTotalMilk(numberOfCups);
              this.totalCoffeeBeans = IngredientCalculator.calculateTotalCoffeeBeans(numberOfCups);
      
          }
      
          // GETTERS AND SETTERS
          public int getTotalWater() {
              return totalWater;
          }
      
          public void setTotalWater(int totalWater) {
              this.totalWater = totalWater;
          }
      
          public int getTotalMilk() {
              return totalMilk;
          }
      
          public void setTotalMilk(int totalMilk) {
              this.totalMilk = totalMilk;
          }
      
          public int getTotalCoffeeBeans() {
              return totalCoffeeBeans;
          }
      
          public void setTotalCoffeeBeans(int totalCoffeeBeans) {
              this.totalCoffeeBeans = totalCoffeeBeans;
          }
      
          public int getNumberOfCups() {
              return numberOfCups;
          }
      
          public void setNumberOfCups(int numberOfCups) {
              this.numberOfCups = numberOfCups;
          }
      }
    learner_created: true
  - name: src/machine/Ingredients.java
    visible: true
    text: |
      package machine;
      
      public class Ingredients {
          // FINAL VARIABLES
          public static final int WATER_PER_CUP = 200; //ml
          public static final int MILK_PER_CUP = 50; //ml
          public static final int COFFEE_BEANS_PER_CUP = 15; // grams
      }
    learner_created: true
  - name: src/machine/IngredientCalculator.java
    visible: true
    text: |
      package machine;
      
      public class IngredientCalculator {
      
          /**
           * Calculates the total amount of water needed based on the number of cups.
           * @param numberOfCups The number of cups needed
           * @return The amount of water as an int, representing ml
           */
          public static int calculateTotalWater(int numberOfCups) {
              return Ingredients.WATER_PER_CUP * numberOfCups;
          }
      
          /**
           * Calculates the total amount of milk needed based on the number of cups.
           * @param numberOfCups The number of cups needed
           * @return The amount of milk as an int, representing ml
           */
          public static int calculateTotalMilk(int numberOfCups) {
              return Ingredients.MILK_PER_CUP * numberOfCups;
          }
      
          /**
           * Calculates the total amount of coffee beans needed based on the number of cups.
           * @param numberOfCups The number of cups needed
           * @return The amount of coffee beans as an int, representing grams
           */
          public static int calculateTotalCoffeeBeans(int numberOfCups) {
              return Ingredients.COFFEE_BEANS_PER_CUP * numberOfCups;
          }
      
      }
    learner_created: true
  - name: src/machine/OutputHandler.java
    visible: true
    text: |
      package machine;
      
      public class OutputHandler {
      
          /**
           * Lists and prints the total ingredients required based on the number of coffees inputted.
           * @param ingredientTotals An instance off the amount of coffees required
           */
          public static void printIngredientRequirements(IngredientTotals ingredientTotals) {
              int cups = ingredientTotals.getNumberOfCups();
              int water = ingredientTotals.getTotalWater();
              int milk = ingredientTotals.getTotalMilk();
              int beans = ingredientTotals.getTotalCoffeeBeans();
              System.out.println("For " + cups + " cups of coffee you will need:\n" +
                      water + " ml of water\n" +
                      milk+ " ml of milk\n" +
                      beans+ " g of coffee beans");
          }
      }
    learner_created: true
  - name: src/machine/notes.txt
    visible: true
    text: |+
      Classes
      - I have my classes
      CoffeeMachine.java
      IngredientCalculator.java
      Ingredients.java
      IngredientTotals.java
      InputHandler.java
      OutputHandler.java
    
    learner_created: true
  - name: src/machine/InputHandler.java
    visible: true
    text: |
      package machine;
      
      import java.util.Scanner;
      
      public class InputHandler {
          // INSTANCE VARIABLES
          private static final Scanner SCANNER = new Scanner(System.in);
      
          /**
           * Prompts the user to enter the total cups of coffee they require.
           * @return The total cups of coffee as an int
           */
          public static int promptForCupsOfCoffee() {
              System.out.println("Write how many cups of coffee you will need: ");
              int cupsOfCoffee = SCANNER.nextInt();
              return cupsOfCoffee;
          }
      }
    learner_created: true
  - name: src/machine/IngredientAvailability.java
    visible: true
    learner_created: true
  - name: src/machine/CreateCoffee.java
    visible: true
    learner_created: true
  - name: src/machine/CreateCoffeeOrder.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5331#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 10 Jul 2024 12:59:38 UTC"
record: 3
