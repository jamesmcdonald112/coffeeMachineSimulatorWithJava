COFFEE MACHINE

Interface - CoffeeMachineActions
void execute()

BuyAction - implements CoffeeMachineActions
void execute()

FillAction - implements CoffeeMachineActions
void execute()

TakeAction -implementsCoffeeMachineActions
void execute()

MENU
Menu - Interface
void run()

CoffeMachineMenu - implements Menu
void run()

CoffeeMenu - implements Menu
void run()

CoffeMachineMenu - Implements  Menu
for buying, filling and taking.

CoffeeMenu - Implements  Menu
for selecting coffees

Abstract Coffee (stores requirements for a coffee)
int water
int milk
int coffeeBeans
double cost

public abstract String getName()

getters and setters for instance variables

Espresso extends Coffee
public espresso{
this.water = {Input}
this.milk = [inout]
etc
}

@override String getName{
return "espresso"
}


packages
- coffeMachine
- coffeeOrder
- i/o
- accounts
- main

TODO

- Create a Main class with a main method to run the program
- Create an instance of Coffee machine and pass it an instance of IngredientAvailability and an
instance of CoffeeMachineCash.

- Menu interface
- CoffeeMachineMenu implements menu interface
- Switch statement for each option
- CoffeeMachineActions interface
- Each action implements the interface

- The user must be prompted with a menu for deciding what they want to do at the coffee machine.
This means a menu is required for the actions, an interface for that menu as it will be used for
more menus, an interface for each action as well, and a class for each action
- When the user selects latte, for instance, the Latte class should be created, and make coffee
should be called, which takes in the requirements for the coffee and the ingredients available


