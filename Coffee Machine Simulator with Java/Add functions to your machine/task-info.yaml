type: edu
files:
  - name: src/machine/coffeeMachine/CoffeeMachine.java
    visible: true
    text: |
      package machine;
      
      public class CoffeeMachine {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/CoffeeMachineTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.List;
      
      
      class TestClue {
          String string;
          TestClue(String s) {
              string = s;
          }
      }
      
      public class CoffeeMachineTest extends StageTest<TestClue> {
      
          @Override
          public List<TestCase<TestClue>> generate() {
              return List.of(
                  new TestCase<TestClue>()
                      .setAttach(new TestClue("take\n"))
                      .setInput("take\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue("buy\n1\n"))
                      .setInput("buy\n1\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue("buy\n2\n"))
                      .setInput("buy\n2\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue("buy\n3\n"))
                      .setInput("buy\n3\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue("fill\n2001\n510\n101\n21\n"))
                      .setInput("fill\n2001\n510\n101\n21\n")
              );
          }
      
          @Override
          public CheckResult check(String reply, TestClue clue) {
              String[] lines = reply.trim().split("\\n");
      
              if (lines.length <= 1) {
                  return CheckResult.wrong("Looks like you didn't print anything!");
              }
      
              String[] clueLines = clue.string.trim().split("\\n");
              String action = clueLines[0].trim();
      
              List<Integer> milk = new ArrayList<>();
              List<Integer> water = new ArrayList<>();
              List<Integer> beans = new ArrayList<>();
              List<Integer> cups = new ArrayList<>();
              List<Integer> money = new ArrayList<>();
      
              for (String line : lines) {
                  String[] words = line.split("\\s+");
                  if (words.length == 0) {
                      continue;
                  }
                  String firstWord = words[0].replace("$", "");
                  int amount;
                  try {
                      amount = Integer.parseInt(firstWord);
                  }
                  catch (Exception e) {
                      continue;
                  }
                  if (line.contains("milk")) {
                      milk.add(amount);
                  }
                  else if (line.contains("water")) {
                      water.add(amount);
                  }
                  else if (line.contains("beans")) {
                      beans.add(amount);
                  }
                  else if (line.contains("cups")) {
                      cups.add(amount);
                  }
                  else if (line.contains("money")) {
                      money.add(amount);
                  }
              }
      
              if (milk.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"milk\", " +
                          "found: " + milk.size());
              }
      
              if (water.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"water\", " +
                          "found: " + water.size());
              }
      
              if (beans.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"beans\", " +
                          "found: " + beans.size());
              }
      
              if (cups.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"cups\", " +
                          "found: " + cups.size());
              }
      
              if (money.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"money\", " +
                          "found: " + money.size());
              }
      
      
              int milk0 = milk.get(0);
              int milk1 = milk.get(milk.size() - 1);
      
              int water0 = water.get(0);
              int water1 = water.get(water.size() - 1);
      
              int beans0 = beans.get(0);
              int beans1 = beans.get(beans.size() - 1);
      
              int cups0 = cups.get(0);
              int cups1 = cups.get(cups.size() - 1);
      
              int money0 = money.get(0);
              int money1 = money.get(money.size() - 1);
      
              if (water0 != 400 || milk0 != 540 || beans0 != 120
                  || cups0 != 9 || money0 != 550) {
                  return new CheckResult(false,
                      "Initial setup is wrong: " +
                          "coffee machine should fe filled like " +
                          "stated in the description");
              }
      
              int diffWater = water1 - water0;
              int diffMilk = milk1 - milk0;
              int diffBeans = beans1 - beans0;
              int diffCups = cups1 - cups0;
              int diffMoney = money1 - money0;
      
              if (action.equals("take")) {
      
                  if (diffMilk != 0) {
                      return new CheckResult(false,
                          "After \"take\" action milk " +
                              "amount shouldn't be changed");
                  }
      
                  if (diffWater != 0) {
                      return new CheckResult(false,
                          "After \"take\" action water " +
                              "amount shouldn't be changed");
                  }
      
                  if (diffBeans != 0) {
                      return new CheckResult(false,
                          "After \"take\" action beans " +
                              "amount shouldn't be changed");
                  }
      
                  if (diffCups != 0) {
                      return new CheckResult(false,
                          "After \"take\" action cups " +
                              "amount shouldn't be changed");
                  }
      
                  if (money1 != 0) {
                      return new CheckResult(false,
                          "After \"take\" action money " +
                              "amount should be zero");
                  }
      
                  return CheckResult.correct();
              }
      
              else if (action.equals("buy")) {
      
                  String option = clueLines[1].trim();
      
                  if (option.equals("1")) {
      
                      if (diffWater != -250) {
                          return new CheckResult(false,
                              "After buying the first option " +
                                  "water amount should be lowered by 250");
                      }
      
                      if (diffMilk != 0) {
                          return new CheckResult(false,
                              "After buying the first option " +
                                  "milk amount should not be changed");
                      }
      
                      if (diffBeans != -16) {
                          return new CheckResult(false,
                              "After buying the first option " +
                                  "beans amount should be lowered by 16");
                      }
      
                      if (diffCups != -1) {
                          return new CheckResult(false,
                              "After buying the first option " +
                                  "cups amount should be lowered by 1");
                      }
      
                      if (diffMoney != 4) {
                          return new CheckResult(false,
                              "After buying the first option " +
                                  "money amount should be increased by 4");
                      }
      
                      return CheckResult.correct();
      
                  }
      
                  else if (option.equals("2")) {
      
                      if (diffWater != -350) {
                          return new CheckResult(false,
                              "After buying the second option " +
                                  "water amount should be lowered by 350");
                      }
      
                      if (diffMilk != -75) {
                          return new CheckResult(false,
                              "After buying the second option " +
                                  "milk amount should be lowered by 75");
                      }
      
                      if (diffBeans != -20) {
                          return new CheckResult(false,
                              "After buying the second option " +
                                  "beans amount should be lowered by 20");
                      }
      
                      if (diffCups != -1) {
                          return new CheckResult(false,
                              "After buying the second option " +
                                  "cups amount should be lowered by 1");
                      }
      
                      if (diffMoney != 7) {
                          return new CheckResult(false,
                              "After buying the second option " +
                                  "money amount should be increased by 7");
                      }
      
                      return CheckResult.correct();
                  }
      
                  else if (option.equals("3")) {
      
                      if (diffWater != -200) {
                          return new CheckResult(false,
                              "After buying the third option " +
                                  "water amount should be lowered by 350");
                      }
      
                      if (diffMilk != -100) {
                          return new CheckResult(false,
                              "After buying the third option " +
                                  "milk amount should be lowered by 75");
                      }
      
                      if (diffBeans != -12) {
                          return new CheckResult(false,
                              "After buying the third option " +
                                  "beans amount should be lowered by 20");
                      }
      
                      if (diffCups != -1) {
                          return new CheckResult(false,
                              "After buying the third option " +
                                  "cups amount should be lowered by 1");
                      }
      
                      if (diffMoney != 6) {
                          return new CheckResult(false,
                              "After buying the third option " +
                                  "money amount should be increased by 7");
                      }
      
                      return CheckResult.correct();
                  }
              }
      
              else if (action.equals("fill")) {
      
                  int water_ = Integer.parseInt(clueLines[1]);
                  int milk_ = Integer.parseInt(clueLines[2]);
                  int beans_ = Integer.parseInt(clueLines[3]);
                  int cups_ = Integer.parseInt(clueLines[4]);
      
                  if (diffMoney != 0) {
                      return new CheckResult(false,
                          "After \"fill\" action " +
                              "money amount should not be changed");
                  }
      
                  if (diffWater != water_) {
                      return new CheckResult(false,
                          "After \"fill\" action " +
                              "water amount expected to be increased by " + water_ +
                              " but was increased by " + diffWater);
                  }
      
                  if (diffMilk != milk_) {
                      return new CheckResult(false,
                          "After \"fill\" action " +
                              "milk amount expected to be increased by " + milk_ +
                              " but was increased by " + diffMilk);
                  }
      
                  if (diffBeans != beans_) {
                      return new CheckResult(false,
                          "After \"fill\" action " +
                              "beans amount expected to be increased by " + beans_ +
                              " but was increased by " + diffBeans);
                  }
      
                  if (diffCups != cups_) {
                      return new CheckResult(false,
                          "After \"fill\" action " +
                              "cups amount expected to be increased by " + cups_ +
                              " but was increased by " + diffCups);
                  }
      
      
                  return CheckResult.correct();
      
              }
      
              throw new RuntimeException("Can't check the answer");
          }
      }
    learner_created: false
  - name: src/machine/coffeeOrder/IngredientRequirements.java
    visible: true
    text: |
      package machine;
      
      public class IngredientRequirements {
          // INSTANCE VARIABLES
          private int totalWater;
          private int totalMilk;
          private int totalCoffeeBeans;
          private int numberOfCups;
      
          // CONSTRUCTOR
      
          /**
           * Constructor that takes in the number of cups and calculates the total ingredients required
           * @param numberOfCups The number of cups of coffee required.
           */
          public IngredientRequirements(int numberOfCups) {
              this.numberOfCups = numberOfCups;
              // Calculates and set all the totals for the instance variables above
              this.totalWater = IngredientCalculator.calculateTotalWater(numberOfCups);
              this.totalMilk = IngredientCalculator.calculateTotalMilk(numberOfCups);
              this.totalCoffeeBeans = IngredientCalculator.calculateTotalCoffeeBeans(numberOfCups);
      
          }
      
          // GETTERS AND SETTERS
          public int getTotalWater() {
              return totalWater;
          }
      
          public void setTotalWater(int totalWater) {
              this.totalWater = totalWater;
          }
      
          public int getTotalMilk() {
              return totalMilk;
          }
      
          public void setTotalMilk(int totalMilk) {
              this.totalMilk = totalMilk;
          }
      
          public int getTotalCoffeeBeans() {
              return totalCoffeeBeans;
          }
      
          public void setTotalCoffeeBeans(int totalCoffeeBeans) {
              this.totalCoffeeBeans = totalCoffeeBeans;
          }
      
          public int getNumberOfCups() {
              return numberOfCups;
          }
      
          public void setNumberOfCups(int numberOfCups) {
              this.numberOfCups = numberOfCups;
          }
      }
    learner_created: true
  - name: src/machine/coffeeMachine/Ingredients.java
    visible: true
    text: |
      package machine;
      
      public class Ingredients {
          // FINAL VARIABLES
          public static final int WATER_PER_CUP = 200; //ml
          public static final int MILK_PER_CUP = 50; //ml
          public static final int COFFEE_BEANS_PER_CUP = 15; // grams
      }
    learner_created: true
  - name: src/machine/coffeeMachine/IngredientAvailability.java
    visible: true
    text: |
      package machine;
      
      public class IngredientAvailability {
          // INSTANCE VARIABLES
          private int water;
          private int milk;
          private int coffeeBeans;
          private int maxCoffees;
      
          // CONSTRUCTOR
          public IngredientAvailability(int water, int milk, int coffeeBeans) {
              this.water = water;
              this.milk = milk;
              this.coffeeBeans = coffeeBeans;
              this.maxCoffees = IngredientCalculator.calculateTotalCoffees(this);
          }
      
          // GETTER AND SETTERS
          public int getWater() {
              return water;
          }
      
          public void setWater(int water) {
              this.water = water;
          }
      
          public int getMilk() {
              return milk;
          }
      
          public void setMilk(int milk) {
              this.milk = milk;
          }
      
          public int getCoffeeBeans() {
              return coffeeBeans;
          }
      
          public void setCoffeeBeans(int coffeeBeans) {
              this.coffeeBeans = coffeeBeans;
          }
      
          public int getMaxCoffees() {
              return maxCoffees;
          }
      
          public void setMaxCoffees(int maxCoffees) {
              this.maxCoffees = maxCoffees;
          }
      }
    learner_created: true
  - name: src/machine/coffeeMachine/IngredientCalculator.java
    visible: true
    text: |
      package machine;
      
      public class IngredientCalculator {
      
          /**
           * Calculates the total amount of water needed based on the number of cups.
           *
           * @param numberOfCups The number of cups needed
           * @return The amount of water as an int, representing ml
           */
          public static int calculateTotalWater(int numberOfCups) {
              return Ingredients.WATER_PER_CUP * numberOfCups;
          }
      
          /**
           * Calculates the total amount of milk needed based on the number of cups.
           *
           * @param numberOfCups The number of cups needed
           * @return The amount of milk as an int, representing ml
           */
          public static int calculateTotalMilk(int numberOfCups) {
              return Ingredients.MILK_PER_CUP * numberOfCups;
          }
      
          /**
           * Calculates the total amount of coffee beans needed based on the number of cups.
           *
           * @param numberOfCups The number of cups needed
           * @return The amount of coffee beans as an int, representing grams
           */
          public static int calculateTotalCoffeeBeans(int numberOfCups) {
              return Ingredients.COFFEE_BEANS_PER_CUP * numberOfCups;
          }
      
          /**
           * Calculates the total possible coffees that can be made.
           * @param ingredientAvailability Ingredients available.
           * @return The number of coffes that can be made
           */
          public static int calculateTotalCoffees(IngredientAvailability ingredientAvailability) {
              // Get the individual ingredients available.
              int water = ingredientAvailability.getWater();
              int milk = ingredientAvailability.getMilk();
              int coffeeBeans = ingredientAvailability.getCoffeeBeans();
      
              // Keep track of the coffees
              int coffeeCount = 0;
      
              // A loop that breaks if we cannot make another coffee
              while (CreateCoffee.isEnoughIngredients(water, milk, coffeeBeans)) {
                  water -= Ingredients.WATER_PER_CUP;
                  milk -= Ingredients.MILK_PER_CUP;
                  coffeeBeans -= Ingredients.COFFEE_BEANS_PER_CUP;
                  coffeeCount++;
      
              }
      
              // Return total coffees
              return coffeeCount;
          }
      
      }
    learner_created: true
  - name: src/machine/io/OutputHandler.java
    visible: true
    text: |
      package machine;
      
      public class OutputHandler {
      
          /**
           * Lists and prints the total ingredients required based on the number of coffees inputted.
           * @param ingredientTotals An instance off the amount of coffees required
           */
          public static void printIngredientRequirements(IngredientRequirements ingredientTotals) {
              int cups = ingredientTotals.getNumberOfCups();
              int water = ingredientTotals.getTotalWater();
              int milk = ingredientTotals.getTotalMilk();
              int beans = ingredientTotals.getTotalCoffeeBeans();
              System.out.println("For " + cups + " cups of coffee you will need:\n" +
                      water + " ml of water\n" +
                      milk+ " ml of milk\n" +
                      beans+ " g of coffee beans");
          }
      }
    learner_created: true
  - name: src/machine/notes.txt
    visible: true
    text: |
      Classes
      - I have my classes
      CoffeeMachine.java
      IngredientCalculator.java
      Ingredients.java
      IngredientTotals.java
      InputHandler.java
      OutputHandler.java
      
      From user
      amyWater
      amtMilk
      amyCoffeeBeans
      
      InputHandler (Done)
      - Prompt the user for the current quantities of water, milk, and coffee beans available
      
      IngredientAvailability (Done)
      Create an instance of Ingredient Availability with these amounts and initialise their instance variables
      - Create an instance of maxCoffeeAvailable which will be calculated and updated when the constructor
       is called.
       - Create a method in ingredinet Calculator to make this amount and return it as an int
      
      
      
      CreateCoffee
      - Handles the creation of coffee by subtracting the amount of ingredients used from the available
      ingredients. (Done)
      - The coffee order class will call this class multiple times when creating coffee. The coffee order
      class will need logic to make sure there is enough ingredients available(Done)
      
      CreateCoffeeOrder
      (Done)
      - Constructor - Takes in an instance of available ingredients and initializes the instance variable.
      
      - coffeeOrderHandler(IngredientAvailability, IngredientRequirements) -=
      This method handles the logic for the coffee order. It takes in the rquest and the ingredients
      avaiable.
      Create vaiables for possible coffee and coffees required as we will need them to reference and for
      calculations
      It checks if the order can be completed. If it cannot it notifies the user and tells them how many cus it can make.
      If it can make the exact amount, it tells taht this, if it can make more it tells them this.
      Finally, if the coffe can be make, the ingredients need to be subtracted.
      
      
      - isEnoughIngredients - This method should check that there is enough ingredients to make the coffee
       order.This method compare total possible coffees with the requirement about and return a boolean.
       (DONE)
      
      - Calls creatCoffee method to subtract from the available ingredients when a coffe is created.
      - A method that calculates coffees remaining after completing order.
      
      i want a method handler for the coffee order. It should handle the logic behind if the coffeee order
       can be made or not
    learner_created: true
  - name: src/machine/io/InputHandler.java
    visible: true
    text: |
      package machine;
      
      import java.util.Scanner;
      
      public class InputHandler {
          // INSTANCE VARIABLES
          private static final Scanner SCANNER = new Scanner(System.in);
      
          /**
           * Prompts the user to enter the total cups of coffee they require.
           * @return The total cups of coffee as an int
           */
          public static int promptForCupsOfCoffee() {
              System.out.println("Write how many cups of coffee you will need: ");
              int cupsOfCoffee = SCANNER.nextInt();
              return cupsOfCoffee;
          }
      
      
          /**
           * Prompts the user to enter the quantity of water available in ml.
           * @return The total available water as an int.
           */
          public static int promptForAvailableWater() {
              System.out.println("Write how many ml of water the coffee machine has:");
              int water = SCANNER.nextInt();
              return water;
          }
      
          /**
           * Prompts the user to enter the quantity of milk available in ml.
           * @return The total available milk as an int.
           */
          public static int promptForAvailableMilk() {
              System.out.println("Write how many ml of milk the coffee machine has:");
              int milk = SCANNER.nextInt();
              return milk;
          }
      
          /**
           * Prompts the user to enter the quantity of coffee beans available in grams.
           * @return The total available coffee beans as an int.
           */
          public static int promptForAvailableCoffeeBeans() {
              System.out.println("Write how many grams of coffee beans the coffee machine has:");
              int coffeeBeans = SCANNER.nextInt();
              return coffeeBeans;
          }
      }
    learner_created: true
  - name: src/machine/coffeeOrder/CreateCoffeeOrder.java
    visible: true
    text: |
      package machine;
      
      public class CreateCoffeeOrder {
          // INSTANCE VARIABLES
          private IngredientAvailability ingredientAvailability;
          private IngredientRequirements ingredientRequirements;
      
          // CONSTRUCTOR
          public CreateCoffeeOrder(IngredientAvailability ingredientAvailability, IngredientRequirements ingredientRequirements) {
              this.ingredientAvailability = ingredientAvailability;
              this.ingredientRequirements = ingredientRequirements;
          }
      
          // GETTERS AND SETTERS
      
          public IngredientAvailability getIngredientAvailability() {
              return ingredientAvailability;
          }
      
          public void setIngredientAvailability(IngredientAvailability ingredientAvailability) {
              this.ingredientAvailability = ingredientAvailability;
          }
      
          public IngredientRequirements getIngredientRequirements() {
              return ingredientRequirements;
          }
      
          public void setIngredientRequirements(IngredientRequirements ingredientRequirements) {
              this.ingredientRequirements = ingredientRequirements;
          }
      
          // PUBLIC METHODS
          public void coffeeOrderHandler() {
      
              // Get the total possible coffees and the ordered coffees and store as variables
              int totalPossibleCoffees = this.ingredientAvailability.getMaxCoffees();
              int orderedCoffees = this.ingredientRequirements.getNumberOfCups();
      
              // Get the difference
              int difference = Math.abs(orderedCoffees - totalPossibleCoffees);
      
              // If there is enough ingredients
              if (isEnoughIngredientsForOrder(this.ingredientRequirements, this.ingredientAvailability)) {
                  // TODO: Logic for removing the total amount of coffee form the ingredients available
                  if (orderedCoffees == totalPossibleCoffees) {
                      System.out.println("Yes, I can make that amount of coffee");
                  } else if (orderedCoffees < totalPossibleCoffees) {
                      System.out.println("Yes, I can make that amount of coffee (and even " + difference + " more " +
                              "than that)");
                  }
                  // If there is not enough ingredients
              } else {
                  System.out.println("No, I can make only " + totalPossibleCoffees + " cup(s) of coffee");
              }
      
          }
      
          // PRIVATE METHODS
      
          /**
           * Makes sure there is enough ingredients by comparing possible cups of coffee that can be
           * made with the amount of cups required for the order.
           *
           * @param ingredientRequirements The ingredients required for the order
           * @param ingredientAvailability The ingredients available
           * @return True if there is enough ingredients for the order; false otherwise
           */
          private static boolean isEnoughIngredientsForOrder(IngredientRequirements ingredientRequirements,
                                                             IngredientAvailability ingredientAvailability) {
              int cupsRequired = ingredientRequirements.getNumberOfCups();
              int maxCupsAvailable = ingredientAvailability.getMaxCoffees();
      
              return cupsRequired <= maxCupsAvailable;
          }
      
      
      }
    learner_created: true
  - name: src/machine/coffeeMachine/CreateCoffee.java
    visible: true
    text: |
      package machine;
      
      public class CreateCoffee {
      
          /**
           * Using the available ingredients, the method subtracts the amount of ingredients used to
           * make one coffee
           * @param ingredientAvailability The ingredients available.
           */
          public static void makeCoffee(IngredientAvailability ingredientAvailability) {
              int water = ingredientAvailability.getWater();
              int milk = ingredientAvailability.getMilk();
              int coffeeBeans = ingredientAvailability.getCoffeeBeans();
      
              ingredientAvailability.setWater(water - Ingredients.WATER_PER_CUP);
              ingredientAvailability.setMilk(milk - Ingredients.MILK_PER_CUP);
              ingredientAvailability.setCoffeeBeans(coffeeBeans - Ingredients.COFFEE_BEANS_PER_CUP);
      
          }
      
          /**
           * Takes in the ingredients and compares with the minim values needed to make a cup of coffee.
           * @param water The amount of water available
           * @param milk The amount of milk available
           * @param coffeeBeans The amount of coffee beans available
           * @return True if the is enough ingredients to make a coffee; false otherwise
           */
          public static boolean isEnoughIngredients(int water, int milk, int coffeeBeans) {
              boolean enoughWater = water >= Ingredients.WATER_PER_CUP;
              boolean enoughMilk = milk >= Ingredients.MILK_PER_CUP;
              boolean enoughCoffeeBeans = coffeeBeans >= Ingredients.COFFEE_BEANS_PER_CUP;
      
              return enoughWater && enoughMilk && enoughCoffeeBeans;
          }
      
      
      }
    learner_created: true
  - name: src/machine/accounts/CoffeeMachineCash.java
    visible: true
    learner_created: true
  - name: src/machine/main/Runner.java
    visible: true
    learner_created: true
  - name: src/machine/coffeeMachine/Menu.java
    visible: true
    learner_created: true
  - name: src/machine/coffeeMachine/CoffeeMachineMenu.java
    visible: true
    learner_created: true
  - name: src/machine/coffeeMachine/CoffeeMachineActions.java
    visible: true
    learner_created: true
  - name: src/machine/coffeeMachine/BuyAction.java
    visible: true
    learner_created: true
  - name: src/machine/coffeeOrder/Coffee.java
    visible: true
    learner_created: true
  - name: src/machine/coffeeOrder/Espresso.java
    visible: true
    learner_created: true
  - name: src/machine/coffeeOrder/Latte.java
    visible: true
    learner_created: true
  - name: src/machine/coffeeOrder/Cappuccino.java
    visible: true
    learner_created: true
  - name: src/machine/coffeeMachine/FillAction.java
    visible: true
    learner_created: true
  - name: src/machine/coffeeMachine/TakeAction.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5332#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 18 Jul 2024 15:39:22 UTC"
record: 4
